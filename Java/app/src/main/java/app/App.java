/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package app;

import java.io.IOException;
import java.lang.reflect.Type;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.Month;
import java.time.YearMonth;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.IntStream;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

public class App {

    public static void main(String[] args) throws IOException, InterruptedException {
        YearMonth targetYearMonth = parseYearMonth(args[0]);
        LocalDate[] targetDays = generateTargetMonthDays(targetYearMonth);
        LocalDate[] publicHolidays = fetchPublicHolidays(targetYearMonth);
        long count = countWeekend(targetDays) + publicHolidays.length - countWeekend(publicHolidays);
        System.out.println(count);
    }

    /**
     * 祝日
     */
    private class PublicHoliday {
        private String date;

        /**
         * 日付
         * 
         * @return LocalDate
         */
        public LocalDate getDate() {
            LocalDate parsedDate = LocalDate.parse(date, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
            return parsedDate;
        }
    }

    /**
     * 対象年月の祝日一覧を取得する。
     * 
     * @param targetYearMonth
     * @return
     * @throws IOException
     * @throws InterruptedException
     */
    private static LocalDate[] fetchPublicHolidays(YearMonth targetYearMonth)
            throws IOException, InterruptedException {
        int targetYear = targetYearMonth.getYear();
        Month targetMonth = targetYearMonth.getMonth();
        // Month targetMonth = targetYearMonth.getMonth();
        // デフォルト設定でHttpClientインスタンスを作成
        HttpClient client = HttpClient.newHttpClient();

        String url = "https://date.nager.at/api/v3/publicholidays/%s/JP".formatted(targetYear);

        // ビルダーを使用してHttpRequestインスタンスを作成
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .build();

        // リクエストを送信
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
        Gson gson = new Gson();
        Type listType = new TypeToken<ArrayList<PublicHoliday>>() {
        }.getType();
        List<PublicHoliday> result = gson.fromJson(response.body(), listType);
        LocalDate[] publicHolidays = result.stream().filter(date -> {
            Month month = date.getDate().getMonth();
            return month.equals(targetMonth);
        }).map(date -> date.getDate()).toArray(LocalDate[]::new);
        return publicHolidays;
    }

    /**
     * yyyyMMの文字列をパースする。
     * 
     * @param inputYearMonth
     * @return
     */
    private static YearMonth parseYearMonth(String inputYearMonth) {
        YearMonth parsedDate = YearMonth.parse(inputYearMonth, DateTimeFormatter.ofPattern("yyyyMM"));
        return parsedDate;
    }

    /**
     * 対象年月の１日から末日までの配列を生成する。
     * 
     * @param targetYearMonth
     * @return
     */
    private static LocalDate[] generateTargetMonthDays(YearMonth targetYearMonth) {
        int lengthOfMonth = targetYearMonth.lengthOfMonth();
        int targetYear = targetYearMonth.getYear();
        Month targetMonth = targetYearMonth.getMonth();
        LocalDate[] targetDays = IntStream.rangeClosed(1, lengthOfMonth).mapToObj(i -> {
            LocalDate date = LocalDate.of(targetYear, targetMonth, i);
            return date;
        }).toArray(LocalDate[]::new);
        return targetDays;
    }

    /**
     * 配列に含まれる週末の日数を数える。
     * 
     * @param days
     * @return
     */
    private static long countWeekend(LocalDate[] days) {
        long count = Arrays.stream(days).filter(date -> {
            return Arrays.asList(DayOfWeek.SUNDAY, DayOfWeek.SATURDAY).contains(date.getDayOfWeek());
        }).count();
        return count;
    }
}
